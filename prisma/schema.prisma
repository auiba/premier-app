

datasource db {
  provider = "postgresql"
  url = env("LOCAL_DATABASE_URL") // uses connection pooling
}

generator client {
  provider = "prisma-client-js"
}

model AdminPhone {
        id           Int       @id @default(autoincrement())
        phone String
}


model Crypto {
      id           Int       @id @default(autoincrement())
      name String
      crypto String
      commission Int
      fee Int
}

model Transaction {
    id           Int       @id @default(autoincrement())
    date  DateTime
    email String
    send Float
    sendCurrency String
    receive Float
    receiveCurrency String
    phone String
    bankstring String?
    trackingUrl String?
}

model Ticket {
 id           Int       @id @default(autoincrement())
  date  DateTime
  email String
  send Float
  sendCurrency String
  receive Float
  receiveCurrency String
  phone String
  bankstring String?
  createdAt DateTime @default(now())
  trackingUrl String?

}


model Customer {
  id           Int       @id @default(autoincrement())
  name String
  lastName String @map("last_name")
  birth        DateTime?
  email String
  gender String?
  civil String
  dni String
  politicalExposure Boolean @map("political_exposure")
  address String
  floor Int
  apartment String
  city String
  postalCode String @map("postal_code")
  phone String
  dniPicture String? @map("dni_picture")
  dniBackPicture String? @map("dni_back_picture")
  selfie String? 
  servicePicture String? @map("service_picture")
}

// Magic link emails auth -->
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  Account       Account?
  Authenticator Authenticator[]
  Session       Session[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
